class SegmentTree {
private:
    vector<int> tree;
    int n;

    void build(const vector<int>& nums, int node, int start, int end, const vector<int>& peakMarkers) {
        if (start == end) { 
            tree[node] = peakMarkers[start];
        } else {
            int mid = (start + end) / 2;
            build(nums, 2 * node, start, mid, peakMarkers);
            build(nums, 2 * node + 1, mid + 1, end, peakMarkers);
            tree[node] = tree[2 * node] + tree[2 * node + 1];
        }
    }

    void update(int node, int start, int end, int idx, int newValue, const vector<int>& peakMarkers) {
        if (idx < start || idx > end) { 
            return;
        }
        if (start == end) { 
            tree[node] = peakMarkers[start];
        } else {
            int mid = (start + end) / 2;
            update(2 * node, start, mid, idx, newValue, peakMarkers);
            update(2 * node + 1, mid + 1, end, idx, newValue, peakMarkers);
            tree[node] = tree[2 * node] + tree[2 * node + 1];
        }
    }

    int query(int node, int start, int end, int l, int r) {
        if (r < start || end < l) {
            return 0;
        }
        if (l <= start && end <= r) {
            return tree[node];
        }
        int mid = (start + end) / 2;
        int leftQuery = query(2 * node, start, mid, l, r);
        int rightQuery = query(2 * node + 1, mid + 1, end, l, r);
        return leftQuery + rightQuery;
    }

public:
    SegmentTree(const vector<int>& nums, const vector<int>& peakMarkers) {
        n = nums.size();
        tree.resize(4 * n);
        build(nums, 1, 0, n - 1, peakMarkers);  
    }

    void updateValue(int idx, int newValue, const vector<int>& peakMarkers) {
        update(1, 0, n - 1, idx, newValue, peakMarkers);
    }

    int sumInRange(int l, int r) {
        return query(1, 0, n - 1, l, r);
    }

};
